
47. 全排列 II

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
        Deque<Integer> path=new LinkedList<>();
        boolean[]flag=new boolean[nums.length];
        Arrays.sort(nums);
        dfs(flag,res,nums,path);
        return res;

    }
    public void dfs(boolean[]flag,List<List<Integer>> res,int[]nums,Deque<Integer> path){
        if(path.size()==nums.length){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=0;i<nums.length;i++){
            //剪枝保证同一个位置不会存放同一个元素两次
            if(i>0&&nums[i]==nums[i-1]&&flag[i-1]){
                continue;
            }
            if(flag[i]==false){
                 flag[i]=true;
            path.push(nums[i]);
            dfs(flag,res,nums,path);
            path.pop();
            flag[i]=false;

            }
           
        }

    }
}


106. 从中序与后序遍历序列构造二叉树

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,Integer> map=new HashMap<>();
    int rootIndex=0;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int i=0;
        for(int val:inorder){
            map.put(val,i++);
        }
         rootIndex=postorder.length-1;
        return helper(inorder,postorder,0,rootIndex);


    }
    public TreeNode helper(int[]inorder,int[]postorder,int leftIdx,int rightIdx){
        if(leftIdx>rightIdx){
            return null;
        }
        TreeNode root=new TreeNode(postorder[rootIndex]);
        int index=map.get(root.val);
        rootIndex--;
        root.right=helper(inorder,postorder,index+1,rightIdx);
        root.left=helper(inorder,postorder,leftIdx,index-1);
        return root;
    }
}
