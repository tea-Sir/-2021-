130. 被围绕的区域

class Solution {
    public void solve(char[][] board) {
        int rLen=board.length;
        int cLen=board[0].length;

        for(int i=0;i<rLen;i++){
            dfs(board,i,0);
            dfs(board,i,cLen-1);
        }
        for(int i=0;i<cLen;i++){
            dfs(board,0,i);
            dfs(board,rLen-1,i);
        }
        for(int i=0;i<rLen;i++){
            for(int j=0;j<cLen;j++){
              if(board[i][j]=='A'){
                  board[i][j]='O';

              }else if(board[i][j]=='O'){
                  board[i][j]='X';

              }
           }
            }
        }
 public void dfs(char[][] board,int row,int cloum){
        int rLen=board.length;
        int cLen=board[0].length;
        if(row<0||cloum<0||row>=rLen||cloum>=cLen||board[row][cloum]!='O'){
            return ;
        }
        board[row][cloum]='A';
        dfs(board,row-1,cloum);
        dfs(board,row+1,cloum);
        dfs(board,row,cloum-1);
        dfs(board,row,cloum+1);
    }
    }


538. 把二叉搜索树转换为累加树
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int num=0;
    public TreeNode convertBST(TreeNode root) {
        if(root==null){
            return null;
        }
        convertBST(root.right);
        root.val=num+root.val;
        num=root.val;
        convertBST(root.left);
        return root;
    }
}
