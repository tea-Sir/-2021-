70. 爬楼梯

class Solution {
    public int climbStairs(int n) {
        int []res=new int[n+1];
        res[0]=1;
        res[1]=1;
        for(int i=2;i<=n;i++){
            res[i]=res[i-1]+res[i-2];
        }
        return res[n];

    }
}

时间复杂度：从第2阶楼梯遍历到第n阶，复杂度为O(n);
空间复杂度：数组使用了额外的空间，复杂度为O(n);

120. 三角形最小路径和
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[][] f = new int[n][n];
        f[0][0] = triangle.get(0).get(0);
        for (int i = 1; i < n; ++i) {
            f[i][0] = f[i - 1][0] + triangle.get(i).get(0);
            for (int j = 1; j < i; ++j) {
                f[i][j] = Math.min(f[i - 1][j - 1], f[i - 1][j]) + triangle.get(i).get(j);
            }
            f[i][i] = f[i - 1][i - 1] + triangle.get(i).get(i);
        }
        int minTotal = f[n - 1][0];
        for (int i = 1; i < n; ++i) {
            minTotal = Math.min(minTotal, f[n - 1][i]);
        }
        return minTotal;
    }
}


时间复杂度：复杂度为O(n*n);
空间复杂度：维护的二维数组使用了额外的空间，复杂度为O(n*n);
