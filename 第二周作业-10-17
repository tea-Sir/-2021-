811. 子域名访问计数

class Solution {
    public List<String> subdomainVisits(String[] cpdomains) {
        Map<String,Integer> map=new HashMap<>();
        for(int i=0;i<cpdomains.length;i++){
            String[] sltArr=cpdomains[i].split("\\s+");
            int count=Integer.valueOf(sltArr[0]);
            String []sltArr2=sltArr[1].split("\\.");
            String cur="";
            int len=sltArr2.length;
            for(int j=len-1;j>=0;j--){
               if(j==len-1){
                   cur=sltArr2[j]+cur;
                
               }else{
                   cur=sltArr2[j]+"."+cur;
               }
               map.put(cur,map.getOrDefault(cur,0)+count);
            }

        }
        List<String> list=new ArrayList<>();
        for(Map.Entry<String,Integer> entry:map.entrySet()){
            list.add(entry.getValue()+" "+entry.getKey());

        }
        return list;

    }
}



697. 数组的度
class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer,int[]> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(!map.containsKey(nums[i])){
                map.put(nums[i],new int[]{1,i,i});
            }else{
                int[]cur=map.get(nums[i]);
                cur[0]++;
                cur[2]=i;
            } 
        }
        int max=0;
        int min=0;
        for(Map.Entry<Integer,int[]> entry:map.entrySet()){
            int []arr=entry.getValue();
            if(arr[0]>max){
            max=arr[0];
            min=arr[2]-arr[1]+1;
            }else if(arr[0]==max&&min>arr[2]-arr[1]){
                min=arr[2]-arr[1]+1;
            }

        }
        return min;

    }
}
